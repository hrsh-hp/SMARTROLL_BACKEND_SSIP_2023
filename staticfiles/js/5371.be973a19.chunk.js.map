{"version":3,"file":"static/js/5371.be973a19.chunk.js","mappings":"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","sources":["views/timetable/Timetable.js"],"sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CRow,\n  CFormSelect,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHeaderCell,\n  CTableRow,\n  CTableHead,\n  CToast,\n  CToastHeader,\n  CToastBody,\n  CToaster\n} from '@coreui/react'\nimport axios from 'axios'\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\nimport FormControl from '../forms/form-control/FormControl'\nimport Select from '../forms/input-group/InputGroup'\nimport Validation from '../forms/validation/Validation'\nimport { useContext, useEffect } from 'react'\nimport { Store } from 'src/views/forms/validation/store'\nimport base_url from 'src/base_url'\nimport Breadcrumbnav from '../breadcrum/Breadcrumbnav'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport SetLecture from './SetLecture'\nimport { useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nconst Timetable = () => {\n  const { state, dispatch: ctxDispatch } = useContext(Store)\n  const [visible, setVisible] = useState(false)\n  const { accessToken, refreshToken, currentBatch } = state\n  const [Semesters, setSemesters] = useState([])\n  const [currentSelectSemester, setcurrentSelectSemester] = useState(null)\n  const [timeTable, settimeTable] = useState([])\n  const [lectureObj,setLectureObj] = useState(null)\n  const [scheduleObj,setscheduleObj] = useState(null)\n  const [update_timetabel,setupdate_timetable] = useState(0)\n\n  const [visibleLectureToast,setVisibleLectureToast] = useState(false)\n\n\n  const naivgate = useNavigate()\n  useEffect(() => {\n    if (currentBatch.slug) {\n      load_semester(currentBatch.slug)\n    }\n  }, [currentBatch])\n  const load_semester = async (batchslug) => {\n    const header = {\n      \"Content-Type\":\"application/json\",\n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_semesters`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{batch_slug: batchslug })\n    if(response_obj.error == false){\n      let response = response_obj.response\n      setSemesters(response.data.data)\n    }else{\n      console.log(response_obj.error)\n    }\n  }\n  const load_time_tale = async () => {\n    const header = {\n      \"Content-Type\":\"application/json\",\n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/timetable/get_timetable`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{ semester_slug: currentSelectSemester })\n    if(response_obj.error == false){\n      let response = response_obj.response\n      console.log(response)\n      settimeTable(response.data.timetable)\n      const setVisibleTost = {}\n        response.data.timetable.schedules.map((item,index)=>{\n            item.lectures.map((lecture,index)=>{\n              setVisibleTost[lecture.slug] = false\n            })\n        })\n        console.log(setVisibleTost);\n        setVisibleLectureToast(setVisibleTost)\n    }else{\n      console.log(response_obj.error)\n    }\n  }\n  useEffect(() => {\n    if (currentSelectSemester) {\n      load_time_tale()\n    }\n  }, [currentSelectSemester,update_timetabel])\n  const editLecture = (lecture, schedule) => {\n      console.log(lecture)\n      console.log(schedule)\n      setLectureObj(lecture)\n      setscheduleObj(schedule)\n    }\n    const onMouseEnterHandel = (lecture_slug)=>{\n      console.log(\"enter\");\n      setVisibleLectureToast(prevState => ({\n        ...prevState,\n        [lecture_slug]: true\n      }));\n    }\n    const onMouseLeaveHandel = (lecture_slug)=>{\n      setVisibleLectureToast(prevState => ({\n        ...prevState,\n        [lecture_slug]: false\n      }));\n    }\n  return (\n    <>\n      <CRow className=\"mb-3\">\n        <CCol>\n          <CCard>\n            <CCardHeader>Semester</CCardHeader>\n            <CCardBody>\n              <CFormSelect\n                aria-label=\"Default select example\"\n                onChange={(e) => {\n                  setcurrentSelectSemester(e.target.value)\n                }}\n              >\n                <option value=\"\">Select Semester</option>\n                {Semesters.map((item, index) => (\n                  <option key={index} value={item.slug}>\n                    Semester - {item.no}\n                  </option>\n                ))}\n              </CFormSelect>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>TimeTable</CCardHeader>\n            <CCardBody  style={!currentSelectSemester ? {display:'flex',justifyContent:'center'} : {}}>\n              {!currentSelectSemester ? (\n                <CToast animation={false} autohide={false} visible={true}>\n                  <CToastHeader>\n                    <svg\n                      className=\"rounded me-2\"\n                      width=\"20\"\n                      height=\"20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      preserveAspectRatio=\"xMidYMid slice\"\n                      focusable=\"false\"\n                      role=\"img\"\n                    >\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007AFF\"></rect>\n                    </svg>\n                    <div className=\"fw-bold me-auto\">SMARTROLL ADMINISTRATION</div>\n                  </CToastHeader>\n                  <CToastBody>Please select a semester!!</CToastBody>\n                </CToast>\n              ) : (\n                <CTable align=\"middle\" className=\"w-100 mb-0 border text-center\" hover responsive>\n                  <CTableHead color=\"light\">\n                    <CTableRow>\n                      <CTableHeaderCell rowSpan={2} style={{ width: '5rem', height: 'auto' }}>\n                        <img src=\"https://upload.wikimedia.org/wikipedia/commons/a/ad/Schedule_or_Calendar_Flat_Icon.svg\"></img>\n                      </CTableHeaderCell>\n                      <CTableHeaderCell>10:30</CTableHeaderCell>\n                      <CTableHeaderCell>11:30</CTableHeaderCell>\n                      <CTableHeaderCell>1:00</CTableHeaderCell>\n                      <CTableHeaderCell>2:00</CTableHeaderCell>\n                      <CTableHeaderCell>3:15</CTableHeaderCell>\n                      <CTableHeaderCell>4:15</CTableHeaderCell>\n                    </CTableRow>\n                    <CTableRow>\n                      <CTableHeaderCell>11:30</CTableHeaderCell>\n                      <CTableHeaderCell>12:30</CTableHeaderCell>\n                      <CTableHeaderCell>2:00</CTableHeaderCell>\n                      <CTableHeaderCell>3:00</CTableHeaderCell>\n                      <CTableHeaderCell>4:15</CTableHeaderCell>\n                      <CTableHeaderCell>5:15</CTableHeaderCell>\n                    </CTableRow>\n                  </CTableHead>\n                  <CTableBody>\n                    {timeTable.schedules && timeTable.schedules.length > 0\n                      ? timeTable.schedules.map((schedule, index) => (\n                          <CTableRow key={schedule.slug}>\n                            <CTableHeaderCell key={index}>{schedule.day}</CTableHeaderCell>\n                            {schedule.lectures.map((lecture, lectureindex) => (\n                              <CTableDataCell\n                                key={lecture.slug}\n                                onClick={(e) => {editLecture(lecture, schedule); setVisible(true)}}\n                                onMouseEnter={(e) => {onMouseEnterHandel(lecture.slug)}}\n                                onMouseLeave={(e) => {onMouseLeaveHandel(lecture.slug)}}\n                                >\n                                        {lecture.classroom && lecture.teacher?(\n                                          <CToaster placement=\"top-start\">\n                                  <CToast autohide={false} visible={visibleLectureToast[lecture.slug]}>\n\n                                    <CToastHeader closeButton>\n                                      <svg\n                                        className=\"rounded me-2\"\n                                        width=\"20\"\n                                        height=\"20\"\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        preserveAspectRatio=\"xMidYMid slice\"\n                                        focusable=\"false\"\n                                        role=\"img\"\n                                      >\n                                        <rect width=\"100%\" height=\"100%\" fill=\"#007AFF\"></rect>\n                                      </svg>\n                                      <div className=\"fw-bold me-auto\">Lecture Details</div>\n                                      \n                                    </CToastHeader>\n                                    <CToastBody>\n                                      <strong>Classroom</strong> - {lecture.classroom.class_name}\n                                      <br></br>\n                                      <strong>Teacher</strong> - {lecture.teacher.profile.name}\n                                      <br></br>\n                                      <strong>Time</strong> - {lecture.start_time} <strong>To</strong> {lecture.end_time}\n                                    </CToastBody>\n                                  </CToast>\n                                </CToaster>\n                                        ):null}\n\n                                {lecture.subject ? (<div><strong style={{color:'gray'}}>{lecture.subject.subject_name}</strong></div>) : '-'}\n                              </CTableDataCell>\n                            ))}\n                          </CTableRow>\n                        ))\n                      : null}\n                  </CTableBody>\n                </CTable>\n              )}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      {lectureObj && scheduleObj ?(<SetLecture visible={visible} setupdate_timetable={setupdate_timetable} setVisible={setVisible} scheduleObj={scheduleObj} lectureObj={lectureObj} currentSelectSemester={currentSelectSemester} />):null}\n    </>\n  )\n}\nexport default Timetable"],"names":["Timetable","state","dispatch","ctxDispatch","useContext","Store","visible","setVisible","useState","accessToken","refreshToken","currentBatch","Semesters","setSemesters","currentSelectSemester","setcurrentSelectSemester","timeTable","settimeTable","lectureObj","setLectureObj","scheduleObj","setscheduleObj","update_timetabel","setupdate_timetable","visibleLectureToast","setVisibleLectureToast","useNavigate","useEffect","slug","load_semester","async","axiosInstance","axios","create","headers","response_obj","APIMiddleware","batch_slug","batchslug","error","response","data","console","log","semester_slug","timetable","setVisibleTost","schedules","map","item","index","lectures","lecture","load_time_tale","_jsxs","_Fragment","children","_jsx","CRow","className","CCol","CCard","CCardHeader","CCardBody","CFormSelect","onChange","e","target","value","no","style","display","justifyContent","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","rowSpan","width","height","src","CTableBody","length","schedule","day","lectureindex","CTableDataCell","onClick","editLecture","onMouseEnter","lecture_slug","prevState","onMouseLeave","classroom","teacher","CToaster","placement","CToast","autohide","CToastHeader","closeButton","xmlns","preserveAspectRatio","focusable","role","fill","CToastBody","class_name","profile","name","start_time","end_time","subject","subject_name","animation","SetLecture"],"sourceRoot":""}